name: Build All AAP Image Flavors (AWS)

on:
  workflow_dispatch:

env:
  PACKER_VERSION: "latest"
  PACKER_FILE: ./images/packer/aap.pkr.hcl
  INSTALLER_URL: ${{ secrets.INSTALLER_URL }}
  INSTALLER_REGISTRY_USERNAME: ${{ secrets.INSTALLER_REGISTRY_USERNAME }}
  INSTALLER_REGISTRY_PASSWORD: ${{ secrets.INSTALLER_REGISTRY_PASSWORD }}
  INSTALLER_ADMIN_PW: ${{ secrets.INSTALLER_ADMIN_PW }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  RHEL_USER_PASSWORD: ${{ secrets.RHEL_USER_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        flavor: [C, CE, CH, CEH]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Run `packer init`
        id: init
        run: "packer init ${{ env.PACKER_FILE }}"

      - name: Run `packer validate`
        id: validate
        run: "packer validate ${{ env.PACKER_FILE }}"

      - name: Set build variables based on flavor
        run: |
          if [[ "${{ matrix.flavor }}" == "C" ]]; then
            export AAP_INCLUDE_CONTROLLER=true
            export AAP_INCLUDE_EDA_CONTROLLER=false
            export AAP_INCLUDE_AUTOMATION_HUB=false
          elif [[ "${{ matrix.flavor }}" == "CE" ]]; then
            export AAP_INCLUDE_CONTROLLER=true
            export AAP_INCLUDE_EDA_CONTROLLER=true
            export AAP_INCLUDE_AUTOMATION_HUB=false
          elif [[ "${{ matrix.flavor }}" == "CH" ]]; then
            export AAP_INCLUDE_CONTROLLER=true
            export AAP_INCLUDE_EDA_CONTROLLER=false
            export AAP_INCLUDE_AUTOMATION_HUB=true
          elif [[ "${{ matrix.flavor }}" == "CEH" ]]; then
            export AAP_INCLUDE_CONTROLLER=true
            export AAP_INCLUDE_EDA_CONTROLLER=true
            export AAP_INCLUDE_AUTOMATION_HUB=true
          fi

          echo "AAP_INCLUDE_CONTROLLER=${AAP_INCLUDE_CONTROLLER}" >> $GITHUB_ENV
          echo "AAP_INCLUDE_EDA_CONTROLLER=${AAP_INCLUDE_EDA_CONTROLLER}" >> $GITHUB_ENV
          echo "AAP_INCLUDE_AUTOMATION_HUB=${AAP_INCLUDE_AUTOMATION_HUB}" >> $GITHUB_ENV

      - name: Build AAP Image
        run: |
          echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
          echo "AWS_REGION: $AWS_REGION"
          echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:0:10}..."
          packer build \
            -var "aws_region=${{ secrets.AWS_REGION || 'us-east-1' }}" \
            -var "aap_include_controller=${AAP_INCLUDE_CONTROLLER}" \
            -var "aap_include_eda_controller=${AAP_INCLUDE_EDA_CONTROLLER}" \
            -var "aap_include_automation_hub=${AAP_INCLUDE_AUTOMATION_HUB}" \
            -force ${{ env.PACKER_FILE }}

      - name: Get AMI ID and rename with version
        id: get-ami
        run: |
          # Get the temporary AMI ID
          TEMP_AMI_ID=$(jq -r '.builds[0].artifact_id' manifest.json | cut -d: -f2)
          echo "Found temporary AMI ID: $TEMP_AMI_ID"
          
          # Extract version from downloaded installer (GitHub workflow should have this)
          if [ -f /tmp/version.txt ]; then
            AAP_VERSION=$(grep installer_version /tmp/version.txt | cut -d= -f2)
            echo "Extracted AAP Version: $AAP_VERSION"
          else
            # Fallback: extract from installer URL if version.txt not available
            AAP_VERSION=$(echo "${{ env.INSTALLER_URL }}" | grep -oP 'setup-\K[0-9]+\.[0-9]+' || echo "25")
            echo "Using version from URL: $AAP_VERSION"
          fi
          
          # Create final AMI name with version
          FINAL_NAME="aap-$AAP_VERSION-${{ matrix.flavor }}-$(date +%Y%m%d)"
          echo "Final AMI name: $FINAL_NAME"
          
          # Copy AMI with new name
          echo "Copying AMI $TEMP_AMI_ID to new name $FINAL_NAME"
          NEW_AMI_ID=$(aws ec2 copy-image \
            --source-image-id "$TEMP_AMI_ID" \
            --source-region ${{ secrets.AWS_REGION || 'us-east-1' }} \
            --name "$FINAL_NAME" \
            --description "AAP $AAP_VERSION ${{ matrix.flavor }} built on $(date +%Y-%m-%d)" \
            --region ${{ secrets.AWS_REGION || 'us-east-1' }} \
            --query 'ImageId' \
            --output text)
          
          echo "New AMI ID: $NEW_AMI_ID"
          
          # Wait for the new AMI to be available
          echo "Waiting for new AMI to be available..."
          aws ec2 wait image-available --image-ids "$NEW_AMI_ID" --region ${{ secrets.AWS_REGION || 'us-east-1' }}
          
          # Delete the temporary AMI
          echo "Deleting temporary AMI: $TEMP_AMI_ID"
          aws ec2 deregister-image --image-id "$TEMP_AMI_ID" --region ${{ secrets.AWS_REGION || 'us-east-1' }}
          
          # Output the final AMI ID for export
          echo "ami_id=$NEW_AMI_ID" >> $GITHUB_OUTPUT
          echo "final_name=$FINAL_NAME" >> $GITHUB_OUTPUT
          echo "Final AMI ready: $NEW_AMI_ID ($FINAL_NAME)"

      - name: Export AMI to S3 as qcow2
        id: export-ami
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
        run: |
          # Set variables
          AMI_ID="${{ steps.get-ami.outputs.ami_id }}"
          S3_BUCKET="${{ secrets.S3_BUCKET_NAME || 'aap-qcow2-images' }}"
          S3_PREFIX="aap-images/${{ matrix.flavor }}"
          EXPORT_TASK_NAME="aap-${{ matrix.flavor }}-$(date +%Y%m%d-%H%M%S)"
          
          echo "Exporting AMI $AMI_ID to S3 bucket: s3://$S3_BUCKET/$S3_PREFIX"
          
          # Create VM export task
          EXPORT_TASK_ID=$(aws ec2 export-image \
            --image-id "$AMI_ID" \
            --disk-image-format QCOW2 \
            --s3-export-location S3Bucket="$S3_BUCKET",S3Prefix="$S3_PREFIX/" \
            --description "AAP ${{ matrix.flavor }} qcow2 export from $AMI_ID" \
            --tag-specifications "ResourceType=export-image-task,Tags=[{Key=Name,Value=$EXPORT_TASK_NAME},{Key=Flavor,Value=${{ matrix.flavor }}},{Key=BuildDate,Value=$(date +%Y-%m-%d)}]" \
            --query 'ExportImageTaskId' \
            --output text)
          
          echo "export_task_id=$EXPORT_TASK_ID" >> $GITHUB_OUTPUT
          echo "Started export task: $EXPORT_TASK_ID"

      - name: Wait for export completion
        id: wait-export
        run: |
          EXPORT_TASK_ID="${{ steps.export-ami.outputs.export_task_id }}"
          echo "Monitoring export task: $EXPORT_TASK_ID"
          
          # Wait for export to complete (timeout after 2 hours)
          TIMEOUT=7200
          ELAPSED=0
          INTERVAL=60
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(aws ec2 describe-export-image-tasks \
              --export-image-task-ids "$EXPORT_TASK_ID" \
              --query 'ExportImageTasks[0].Status' \
              --output text)
            
            PROGRESS=$(aws ec2 describe-export-image-tasks \
              --export-image-task-ids "$EXPORT_TASK_ID" \
              --query 'ExportImageTasks[0].Progress' \
              --output text)
            
            echo "Export status: $STATUS, Progress: $PROGRESS%"
            
            if [ "$STATUS" = "completed" ]; then
              S3_URL=$(aws ec2 describe-export-image-tasks \
                --export-image-task-ids "$EXPORT_TASK_ID" \
                --query 'ExportImageTasks[0].S3ExportLocation.S3Bucket' \
                --output text)
              S3_KEY=$(aws ec2 describe-export-image-tasks \
                --export-image-task-ids "$EXPORT_TASK_ID" \
                --query 'ExportImageTasks[0].S3ExportLocation.S3Key' \
                --output text)
              
              echo "‚úÖ Export completed!"
              echo "üì¶ qcow2 image available at: s3://$S3_URL/$S3_KEY"
              echo "s3_url=s3://$S3_URL/$S3_KEY" >> $GITHUB_OUTPUT
              break
            elif [ "$STATUS" = "cancelled" ] || [ "$STATUS" = "cancelling" ]; then
              echo "‚ùå Export was cancelled"
              exit 1
            elif [ "$STATUS" = "failed" ]; then
              echo "‚ùå Export failed"
              aws ec2 describe-export-image-tasks --export-image-task-ids "$EXPORT_TASK_ID"
              exit 1
            fi
            
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "‚ùå Export timed out after 2 hours"
            exit 1
          fi

      - name: Cleanup AWS resources  
        if: always()
        run: |
          AMI_ID="${{ steps.get-ami.outputs.ami_id }}"
          
          if [ -n "$AMI_ID" ] && [ "$AMI_ID" != "null" ]; then
            echo "üßπ Cleaning up AWS resources for AMI: $AMI_ID"
            
            # Get snapshot IDs associated with the AMI
            SNAPSHOT_IDS=$(aws ec2 describe-images \
              --image-ids "$AMI_ID" \
              --query 'Images[0].BlockDeviceMappings[*].Ebs.SnapshotId' \
              --output text \
              --region ${{ secrets.AWS_REGION || 'us-east-1' }} || echo "")
            
            # Deregister the AMI
            echo "üóëÔ∏è Deregistering AMI: $AMI_ID"
            aws ec2 deregister-image \
              --image-id "$AMI_ID" \
              --region ${{ secrets.AWS_REGION || 'us-east-1' }} || echo "Failed to deregister AMI"
            
            # Delete associated snapshots
            if [ -n "$SNAPSHOT_IDS" ] && [ "$SNAPSHOT_IDS" != "None" ]; then
              for SNAPSHOT_ID in $SNAPSHOT_IDS; do
                if [ "$SNAPSHOT_ID" != "None" ]; then
                  echo "üóëÔ∏è Deleting snapshot: $SNAPSHOT_ID"
                  aws ec2 delete-snapshot \
                    --snapshot-id "$SNAPSHOT_ID" \
                    --region ${{ secrets.AWS_REGION || 'us-east-1' }} || echo "Failed to delete snapshot $SNAPSHOT_ID"
                fi
              done
            fi
            
            echo "‚úÖ AWS cleanup completed"
          else
            echo "‚ÑπÔ∏è No AMI to cleanup"
          fi

      - name: Generate build summary
        if: success()
        run: |
          echo "## üéâ AAP Image Build Complete - Flavor: ${{ matrix.flavor }}" >> $GITHUB_STEP_SUMMARY
          echo "**AMI Name:** ${{ steps.get-ami.outputs.final_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Location:** ${{ steps.wait-export.outputs.s3_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Components:**" >> $GITHUB_STEP_SUMMARY
          echo "- Controller: ${AAP_INCLUDE_CONTROLLER}" >> $GITHUB_STEP_SUMMARY
          echo "- EDA: ${AAP_INCLUDE_EDA_CONTROLLER}" >> $GITHUB_STEP_SUMMARY
          echo "- Hub: ${AAP_INCLUDE_AUTOMATION_HUB}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** AMI and snapshots have been automatically cleaned up to save costs." >> $GITHUB_STEP_SUMMARY

      # - name: Capture installer details from Packer
      #   if: success()
      #   run: |
      #     if [[ -f /tmp/version.txt ]]; then
      #       while IFS='=' read -r key value; do
      #         echo "$key=$value" >> $GITHUB_ENV
      #       done < /tmp/version.txt
      #     fi

      # - name: Generate workflow summary
      #   run: |
      #     echo "### AAP Image Build Summary" >> $GITHUB_STEP_SUMMARY
      #     echo "**Installer Filename:** ${{ env.installer_filename }}" >> $GITHUB_STEP_SUMMARY
      #     echo "**Installer SHA-256 Checksum:** ${{ env.installer_checksum }}" >> $GITHUB_STEP_SUMMARY
