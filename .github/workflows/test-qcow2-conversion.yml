name: Test qcow2 Conversion

on:
  workflow_dispatch:

jobs:
  test-conversion:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create test RAW file and test conversion
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          set -e

          # Create a small test RAW file (100MB)
          echo "Creating small test RAW file..."
          dd if=/dev/zero of=test.raw bs=1M count=100

          # Upload to S3
          S3_BUCKET="${{ secrets.S3_BUCKET_NAME || 'aap-qcow2-images' }}"
          TEST_RAW_KEY="aap-images/test/test-$(date +%Y%m%d-%H%M%S).raw"
          echo "Uploading test file to s3://$S3_BUCKET/$TEST_RAW_KEY"
          aws s3 cp test.raw "s3://$S3_BUCKET/$TEST_RAW_KEY"
          rm test.raw

          # Find latest RHEL 9 AMI
          echo "Finding latest RHEL 9 AMI..."
          CONVERTER_AMI=$(aws ec2 describe-images \
            --owners 309956199498 \
            --filters "Name=name,Values=RHEL-9*_HVM-*-x86_64-*-GP*" \
                      "Name=state,Values=available" \
            --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
            --output text)
          echo "Using AMI: $CONVERTER_AMI"

          # Create temporary SSH key
          echo "Creating SSH key..."
          ssh-keygen -t rsa -b 2048 -f /tmp/converter-key -N ""
          chmod 600 /tmp/converter-key

          # Create security group allowing SSH
          echo "Creating security group..."
          SG_ID=$(aws ec2 create-security-group \
            --group-name "qcow2-converter-test-$(date +%s)" \
            --description "Temporary SG for qcow2 conversion test" \
            --query 'GroupId' \
            --output text)
          echo "Security group created: $SG_ID"

          # Add SSH ingress rule
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr 0.0.0.0/0

          # Import SSH key
          KEY_NAME="converter-test-$(date +%s)"
          aws ec2 import-key-pair \
            --key-name $KEY_NAME \
            --public-key-material fileb:///tmp/converter-key.pub

          # Create user-data script
          cat > /tmp/user-data.sh << 'USERDATA'
          #!/bin/bash
          set -x
          exec > /var/log/user-data.log 2>&1
          yum install -y qemu-img awscli
          USERDATA

          # Launch instance
          echo "Launching converter instance..."
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $CONVERTER_AMI \
            --instance-type t3.small \
            --key-name $KEY_NAME \
            --security-group-ids $SG_ID \
            --block-device-mappings '[{"DeviceName":"/dev/sda1","Ebs":{"VolumeSize":20,"VolumeType":"gp3"}}]' \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=qcow2-converter-test},{Key=ManagedBy,Value=github-actions-test}]' \
            --user-data file:///tmp/user-data.sh \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Converter instance: $INSTANCE_ID"

          # Wait for instance to be running
          echo "Waiting for instance to be running..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Get public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "Instance IP: $PUBLIC_IP"

          # Wait for SSH to be ready
          echo "Waiting for SSH to be ready..."
          for i in {1..30}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i /tmp/converter-key ec2-user@$PUBLIC_IP "echo SSH ready" 2>/dev/null; then
              echo "SSH is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "ERROR: SSH did not become ready in time"
              aws ec2 terminate-instances --instance-ids $INSTANCE_ID
              aws ec2 delete-key-pair --key-name $KEY_NAME
              aws ec2 delete-security-group --group-id $SG_ID
              exit 1
            fi
            echo "Waiting for SSH... ($i/30)"
            sleep 10
          done

          # Wait for user-data to complete and tools to be installed
          echo "Waiting for qemu-img and aws-cli installation..."
          for i in {1..30}; do
            if ssh -o StrictHostKeyChecking=no -i /tmp/converter-key ec2-user@$PUBLIC_IP "command -v qemu-img && command -v aws" 2>/dev/null; then
              echo "Tools are installed"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "ERROR: Tools did not install in time"
              echo "Checking user-data log..."
              ssh -o StrictHostKeyChecking=no -i /tmp/converter-key ec2-user@$PUBLIC_IP "sudo cat /var/log/user-data.log" || true
              aws ec2 terminate-instances --instance-ids $INSTANCE_ID
              aws ec2 delete-key-pair --key-name $KEY_NAME
              sleep 30
              aws ec2 delete-security-group --group-id $SG_ID || true
              exit 1
            fi
            echo "Waiting for installation... ($i/30)"
            sleep 10
          done

          # Run conversion via SSH
          echo "Running qcow2 conversion..."
          RAW_FILE=$(basename "$TEST_RAW_KEY")
          QCOW2_FILE="test-$(date +%Y%m%d-%H%M%S).qcow2"
          QCOW2_S3_KEY="aap-images/test/$QCOW2_FILE"

          ssh -o StrictHostKeyChecking=no -i /tmp/converter-key ec2-user@$PUBLIC_IP << EOF
            set -e
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION

            echo "Downloading raw image..."
            aws s3 cp s3://$S3_BUCKET/$TEST_RAW_KEY /tmp/$RAW_FILE --no-progress

            echo "Converting to qcow2 with compression..."
            sudo qemu-img convert -f raw -O qcow2 -c /tmp/$RAW_FILE /tmp/$QCOW2_FILE

            echo "Removing raw file..."
            rm -f /tmp/$RAW_FILE

            echo "Uploading qcow2..."
            aws s3 cp /tmp/$QCOW2_FILE s3://$S3_BUCKET/$QCOW2_S3_KEY --no-progress

            echo "Conversion complete"
            sudo rm -f /tmp/$QCOW2_FILE
          EOF

          # Verify qcow2 file exists in S3
          echo "Verifying qcow2 file in S3..."
          if aws s3 ls "s3://$S3_BUCKET/$QCOW2_S3_KEY"; then
            echo "SUCCESS: qcow2 file created successfully!"
          else
            echo "ERROR: qcow2 file not found in S3"
            exit 1
          fi

          # Cleanup
          echo "Cleaning up resources..."

          # Terminate instance
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          echo "Waiting for instance termination..."
          aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID

          # Delete SSH key
          aws ec2 delete-key-pair --key-name $KEY_NAME
          rm -f /tmp/converter-key /tmp/converter-key.pub

          # Delete security group
          sleep 30
          aws ec2 delete-security-group --group-id $SG_ID || echo "Security group cleanup failed (may need manual deletion)"

          # Delete test files from S3
          aws s3 rm "s3://$S3_BUCKET/$TEST_RAW_KEY"
          aws s3 rm "s3://$S3_BUCKET/$QCOW2_S3_KEY"

          echo "Test completed successfully and all resources cleaned up!"
