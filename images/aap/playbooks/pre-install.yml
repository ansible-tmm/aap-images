---
- name: (PRE INSTALL) - Configure RHEL VM for AAP containerized install
  hosts: all
  vars:
    installer_directory: /tmp/ansible-automation-platform-containerized-setup
    installer_url: "{{ lookup('env', 'INSTALLER_URL') | default('CHANGEME', true) }}"

  tasks:

    - name: Set the system hostname for the AAP installer
      become: true
      ansible.builtin.command: hostnamectl set-hostname {{ installer_fqdn_hostname }}

    - name: Remove any existing entry for {{ installer_fqdn_hostname }}
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^.*\s+{{ installer_fqdn_hostname }}(\s|$)'
        state: absent
      become: true

    - name: Add entry to /etc/hosts for {{ installer_fqdn_hostname }}
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ installer_fqdn_hostname }}"
        state: present
        create: true
        backup: true
      become: true

    - name: Verify hostname resolution
      ansible.builtin.shell: getent ahostsv4 {{ installer_fqdn_hostname }}
      register: hostname_check
      failed_when: "'127.0.0.1' not in hostname_check.stdout"

    - name: Install ansible-core, wget, git, rsync, and podman
      ansible.builtin.package:
        name:
          - ansible-core
          - wget
          - git
          - rsync
          - podman
        state: present
      become: true

    - name: Download Ansible Automation Platform installer
      ansible.builtin.get_url:
        url: "{{ installer_url }}"
        dest: "{{ installer_directory }}.tar.gz"

    - name: Calculate SHA-256 checksum of the installer
      ansible.builtin.shell: "sha256sum {{ installer_directory }}.tar.gz | awk '{ print $1 }'"
      register: installer_checksum

    - name: Manually extract the installer
      ansible.builtin.command:
        cmd: "tar -xf {{ installer_directory }}.tar.gz -C /tmp/"

    - name: List extracted contents for debugging
      ansible.builtin.command:
        cmd: "tar -tzf {{ installer_directory }}.tar.gz | head -1"
      register: tar_contents

    - name: Debug tar contents
      ansible.builtin.debug:
        msg: "First file in archive: {{ tar_contents.stdout }}"

    - name: Find the top-level extracted directory matching the expected pattern
      ansible.builtin.find:
        paths: "/tmp/"
        patterns: "ansible-automation-platform-*setup*"
        file_type: directory
        recurse: false
      register: extracted_dir

    - name: Debug the found directory path
      ansible.builtin.debug:
        var: extracted_dir.files

    - name: Fail if no installer directory found
      ansible.builtin.fail:
        msg: "No installer directory matching 'ansible-automation-platform-*setup*' found in /tmp/. Archive may have a different structure."
      when: extracted_dir.matched == 0

    - name: Extract the version number and filename from installer archive
      ansible.builtin.set_fact:
        extracted_version: "{{ extracted_dir.files[0].path | regex_search('ansible-automation-platform.*setup-(.*)$', '\\1') | first }}"
        installer_filename: "{{ extracted_dir.files[0].path | basename }}"
      when: extracted_dir.matched > 0

    - name: Debug the extracted version
      ansible.builtin.debug:
        var: extracted_version

    - name: Rename the top-level directory to a constant name
      ansible.builtin.command:
        cmd: "mv {{ extracted_dir.files[0].path }} {{ installer_directory }}"
      args:
        removes: "{{ extracted_dir.files[0].path }}"
      when: extracted_dir.matched > 0

    - name: Save installer details to version.txt
      ansible.builtin.copy:
        content: |
          installer_filename={{ installer_filename }}
          installer_checksum={{ installer_checksum.stdout }}
          installer_version={{ extracted_version }}
        dest: "{{ installer_directory }}/version.txt"

    - name: List contents of /tmp to verify the directory
      ansible.builtin.command:
        cmd: "ls -la /tmp/"
      register: tmp_contents

    - name: List contents of /tmp/installer to verify the directory
      ansible.builtin.command:
        cmd: "ls -la {{ installer_directory }}"
      register: installer_tmp_contents

    - name: Debug
      ansible.builtin.debug:
        var: installer_tmp_contents

    - name: Copy version.txt from VM to Packer host
      ansible.builtin.fetch:
        src: "{{ installer_directory }}/version.txt"
        dest: "/tmp/version.txt"
        flat: yes
      delegate_to: localhost
      ignore_errors: true

    - name: Generate AAP installer inventory file
      ansible.builtin.template:
        src: templates/inventory.j2
        dest: "{{ installer_directory }}/inventory.custom"

    - name: Copy manifest.zip.gpg to AAP VM
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../files/manifest.zip.gpg"
        dest: /tmp/manifest.zip.gpg

    - name: Create manifest.zip
      ansible.builtin.command: gpg --quiet --batch --yes --decrypt --passphrase='{{ GPG_PASSPHRASE }}' --output /tmp/manifest.zip /tmp/manifest.zip.gpg

    - name: Create a postinstall directory
      ansible.builtin.file:
        path: /tmp/config
        state: directory
        mode: '0755'

    - name: List contents of /tmp to verify the directory
      ansible.builtin.command:
        cmd: "ls -la /tmp/"
      register: tmp_contents

    - name: Debug contents of /tmp
      ansible.builtin.debug:
        var: tmp_contents.stdout_lines

    - name: Test Red Hat registry authentication
      ansible.builtin.shell: |
        podman login registry.redhat.io -u "{{ installer_registry_username }}" -p "{{ installer_registry_password }}"
      register: registry_login_result
      become: true
      failed_when: registry_login_result.rc != 0

    - name: Verify registry authentication worked
      ansible.builtin.debug:
        msg: "Registry login successful"
      when: registry_login_result.rc == 0

    # Try changes for project zero
    - name: Enable password authentication in sshd_config
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication yes'
        state: present
      become: true

    - name: Restart SSHD to apply changes
      ansible.builtin.service:
        name: sshd
        state: restarted
      become: true

    - name: Set password for rhel user using variable
      become: true
      ansible.builtin.shell: echo "rhel:{{ rhel_user_password }}" | chpasswd

    - name: Install cloud-init
      ansible.builtin.package:
        name:
          - cloud-init
        state: present
      become: true

    - name: Enable cloud-init services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
      loop:
        - cloud-init

