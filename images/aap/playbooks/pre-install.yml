---
- name: (PRE INSTALL) - Configure RHEL VM for AAP containerized install
  hosts: localhost
  connection: local
  vars:
    installer_directory: /tmp/ansible-automation-platform-containerized-setup
    installer_url: "{{ lookup('env', 'INSTALLER_URL') | default('INSTALLER_URL', true) }}"

  tasks:

    - name: Set the system hostname for the AAP installer
      become: true
      ansible.builtin.command: hostnamectl set-hostname {{ installer_fqdn_hostname }}

    - name: Add entry to /etc/hosts for {{ installer_fqdn_hostname }}
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ installer_fqdn_hostname }}"
        state: present
        create: true
        backup: true
      become: true

    - name: Install ansible-core, wget, git, and rsync
      ansible.builtin.package:
        name:
          - ansible-core
          - wget
          - git
          - rsync
        state: present
      become: true

    - name: Download Ansible Automation Platform installer
      ansible.builtin.get_url:
        url: "{{ installer_url }}"
        dest: "{{ installer_directory }}.tar.gz"

    - name: Manually extract the installer
      ansible.builtin.command:
        cmd: "tar -xf {{ installer_directory }}.tar.gz -C /tmp/"

    - name: Find the top-level extracted directory matching the expected pattern
      ansible.builtin.find:
        paths: "/tmp/"
        patterns: "ansible-automation-platform-containerized-setup-*"
        file_type: directory
        recurse: false
      register: extracted_dir

    - name: Debug the found directory path
      ansible.builtin.debug:
        var: extracted_dir.files

    - name: Extract the version number from the top-level directory
      ansible.builtin.set_fact:
        extracted_version: "{{ extracted_dir.files[0].path | regex_search('ansible-automation-platform-containerized-setup-(.*)$', '\\1') }}"
      when: extracted_dir.matched > 0

    - name: Debug the extracted version
      ansible.builtin.debug:
        var: extracted_version

    - name: Rename the top-level directory to a constant name
      ansible.builtin.command:
        cmd: "mv {{ extracted_dir.files[0].path }} {{ installer_directory }}"
      args:
        removes: "{{ extracted_dir.files[0].path }}"

    - name: Save the version number to version.txt
      ansible.builtin.copy:
        content: "{{ extracted_version }}"
        dest: "{{ installer_directory }}/installer-version.txt"

    - name: Generate AAP installer inventory file
      ansible.builtin.template:
        src: templates/inventory.j2
        dest: "{{ installer_directory }}/inventory.custom"

    - name: Copy manifest.zip.gpg to AAP VM
      ansible.builtin.copy:
        src: /workspaces/aap-images/images/aap/files/manifest.zip.gpg
        dest: /tmp/manifest.zip.gpg

    - name: Create manifest.zip
      ansible.builtin.command: gpg --quiet --batch --yes --decrypt --passphrase='{{ GPG_PASSPHRASE }}' --output /tmp/manifest.zip /tmp/manifest.zip.gpg

    - name: Create a postinstall directory
      ansible.builtin.file:
        path: /tmp/config
        state: directory
        mode: '0755'